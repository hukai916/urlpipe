process {

    withName: CUTADAPT {
        ext.args = '-a AGATCGGAAGAGCACACGTCT -A TCGGAAGAGCGTCGTGTAG'
    }

    // withName: CLASSIFY_LOCUS {
    //     // ext.args = 'TCTCTCCGGGGACTGCCGTG CGGCTGAGGCAGCAGCGGCT 2' // first 20nt from R1, R2, and allowed mismatch (including INDELs)
    //     ext.args = "CCGGGCGGGAGACCGCCATG CCTCAGCCGCCGCCGCAGGC 2" // now use sequences directly from reference seq since actual amplicon might be longer (including 5'-HTT specific sequence) than the target reference genome, and this would match up with the logic used in CLASSIFY_INDEL and CLASSIFY_READTHROUGH
    // }

    // withName: CLASSIFY_INDEL {
    //     ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (substitution only)
    //     // R2 flanking nt : same direction as R1
    // }

    withName: CLASSIFY_READTHROUGH {
        ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt : same direction as R1
    }

    withName: PREP_REF {
        ext.reference = "assets/IlluminaHsQ50FibTrim_Ref.fa"
        ext.repeat_start = 69 // start position of repeat in ref, 1-based coordinate
        ext.repeat_end = 218 // end position of repeat in ref, 1-based coordinate
        ext.repeat_unit = "CAG"
        ext.repeat_range = "0:150" // range of number of repeat units (e.g. "CAG") when it comes to prep_ref
    }

    withName: BWA {
        ext.reference = "assets/IlluminaHsQ50FibTrim_Ref.fa"
        ext.args = "" // bwa options
    }

    withName: REPEAT_LENGTH_DISTRIBUTION_DEFAULT {
        ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt: same direction as R1
    }

    withName: REPEAT_LENGTH_DISTRIBUTION_DEFAULT {
        ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt: same direction as R1
    }

    withName: REPEAT_LENGTH_DISTRIBUTION_MERGE {
        ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt: same direction as R1
    }

    withName: REPEAT_LENGTH_DISTRIBUTION_NANOPORE {
        ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt: same direction as R1
    }

}
