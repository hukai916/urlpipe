/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/0a_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: UMI_EXTRACT {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--bc-pattern=NNNNNNNNNN'
    }

    withName: CUTADAPT {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '-g GTAGGCTCCAAGTCTTCAGGGTCTGT -G CGGCTGAGGCAGCAGCGGCTGT'
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: FASTQC_SINGLE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: MAP_LOCUS {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'CCCATCGGGCAGGAAGCCGT GCCTGCGGCGGCGGCTGAGG 2' // first 20nt from R1, R2, and allowed mismatch (including INDELs)
    }

    withName: CAT_STAT {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: CAT_STAT_CUTOFF {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: UMI_PATTERN {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // X-axis range: choose from 'auto' or a positive number; if 'auto', the X-axis scale of the plot will be automatically determined.
    }

    withName: UMI_PATTERN2 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // X-axis range: choose from 'auto' or a positive number; if 'auto', the X-axis scale of the plot will be automatically determined.
    }


    withName: CLASSIFY_INDEL {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'AGTCCCTCAAGTCCTTCCAG GGCGGCGGCGGCGGTGGCGG 2'
      //  ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (substitution only)
        // R2 flanking nt reverse complemented
    }


    withName: CLASSIFY_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
    }

    withName: BBMERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: REPEAT_DIST_DISTANCE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2 250'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
        // Choose an integer specifying the X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: REPEAT_DIST_DISTANCE_MERGED {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2 250'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
        // Choose an integer specifying the X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: REPEAT_DIST_WITHIN_UMI_GROUP_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '10 250' // first args: max group number to plot; second args: choose an integer specifying the X-axis scale
    }

    withName: REPEAT_DIST_WITHIN_UMI_GROUP_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '10 250' // first args: max group number to plot; second args: choose an integer specifying the X-axis scale
    }


    withName: UMI_GROUP_STAT_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: UMI_GROUP_STAT_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }


    withName: REPEAT_DIST_UMI_CORRECT_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '250' // choose an integer, for X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: REPEAT_DIST_UMI_CORRECT_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '250' // choose an integer, for X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: PLOT_FRAC_4D_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_4D_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_R1_FRAC_1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_R1_FRAC_3 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_R1_FRAC_10 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_R1_FRAC_30 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_MERGE_FRAC_1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_MERGE_FRAC_3 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_MERGE_FRAC_10 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_5D_MERGE_FRAC_30 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }
}
