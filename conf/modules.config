/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/0_pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_RAW {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/2a_fastqc/fastq_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: CAT_FASTQ {
      publishDir = [
          path: { "${params.outdir}/1_preprocess/1a_lane_merge" },
          mode: params.publish_dir_fastq,
          saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    }

    withName: UMI_EXTRACT {
        publishDir = [
            path: { "${params.outdir}/1_preprocess/1b_umi_extract" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--bc-pattern=NNNNNNNNNN'
    }

    withName: CUTADAPT {
        publishDir = [
            path: { "${params.outdir}/1_preprocess/1c_cutadapt" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '-g GTAGGCTCCAAGTCTTCAGGGTCTGT -G CGGCTGAGGCAGCAGCGGCTGT'
    }

    withName: FASTQC_CUTADAPT {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/2a_fastqc/fastq_cutadapt" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: READ_PER_UMI {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/read_per_umi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // X-axis range: choose from 'auto' or a positive number; if 'auto', the X-axis scale of the plot will be automatically determined.
    }

    withName: CLASSIFY_LOCUS {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3a_classify_locus" },
            mode: params.publish_dir_mode,
            pattern: "*/*{fastq.gz, yml}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'CCCATCGGGCAGGAAGCCGT GCCTGCGGCGGCGGCTGAGG 2' // first 20nt from R1, R2, and allowed mismatch (including INDELs)
    }

    withName: STAT_LOCUS {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3a_classify_locus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_locus.csv'
        ext.header = 'sample_name,on_target_locus_reads,off_target_locus_reads,problem_locus_reads,on_target_locus_percent,off_target_locus_percent,problem_locus_percent'
    }

    withName: CLASSIFY_INDEL {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel" },
            mode: params.publish_dir_mode,
            pattern: '*/*.fastq.gz',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'AGTCCCTCAAGTCCTTCCAG GGCGGCGGCGGCGGTGGCGG 2'
        //ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatches (substitution only)
        //R2 flanking nt reverse complemented
    }

    withName: STAT_INDEL {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_indel.csv'
        ext.header = 'sample_name,no_indel,indel_5p,indel_3p,indel_5p_3p,no_indel_percent,indel_5p_percent,indel_3p_percent,indel_5p_3p_percent'
    }

    withName: CLASSIFY_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3c_classify_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
    }

    withName: STAT_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3c_classify_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_readthrough.csv'
        ext.header = 'sample_name,count_readthrough,count_readthrough_percent,count_non_readthrough,p_count_non_readthrough_percent'
    }

    withName: FASTQC_SINGLE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }




    withName: CAT_STAT_CUTOFF {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: UMI_PATTERN2 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // X-axis range: choose from 'auto' or a positive number; if 'auto', the X-axis scale of the plot will be automatically determined.
    }

    withName: BBMERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: REPEAT_DIST_DISTANCE_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2 300'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
        // Choose an integer specifying the X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: REPEAT_DIST_DISTANCE_MERGED {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2 300'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
        // Choose an integer specifying the X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: READ_LENGTH_DIST {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500'
        // bin_number
    }

    withName: REPEAT_DIST_WITHIN_UMI_GROUP_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '10 300' // first args: max group number to plot; second args: choose an integer specifying the X-axis scale
    }

    withName: REPEAT_DIST_WITHIN_UMI_GROUP_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '10 300' // first args: max group number to plot; second args: choose an integer specifying the X-axis scale
    }


    withName: UMI_GROUP_STAT_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: UMI_GROUP_STAT_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: UMI_GROUP_STAT_INDEL {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: REPEAT_DIST_UMI_CORRECT_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '300' // choose an integer, for X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: REPEAT_DIST_UMI_CORRECT_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '300' // choose an integer, for X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: REPEAT_DIST_UMI_CORRECT_INDEL {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // choose an integer, for X-axis scale.
        ext.args_frac = '151 166' // to caculate fraction of reads < 151 and > 166
    }

    withName: READ_UMI_CORRECT {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: PLOT_FRAC_CUTOFF_R1 {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }

    withName: PLOT_FRAC_CUTOFF_MERGE {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
    }
}
