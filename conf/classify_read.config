process {
    withName: CLASSIFY_LOCUS {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3a_classify_locus" },
            mode: params.publish_dir_mode,
            pattern: "*/*{fastq.gz, yml}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'CCCATCGGGCAGGAAGCCGT GCCTGCGGCGGCGGCTGAGG 2' // first 20nt from R1, R2, and allowed mismatch (including INDELs)
    }

    withName: STAT_LOCUS {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3a_classify_locus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_locus.csv'
        ext.header = 'sample_name,on_target_locus_reads,off_target_locus_reads,problem_locus_reads,on_target_locus_percent,off_target_locus_percent,problem_locus_percent'
    }

    withName: CLASSIFY_INDEL {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel" },
            mode: params.publish_dir_mode,
            pattern: '*/*.fastq.gz',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'AGTCCCTCAAGTCCTTCCAG GGCGGCGGCGGCGGTGGCGG 2'
        ext.indel_cutoff = '0.5' // if > 0.5 reads from the same UMI group are indel, all reads in that group will be treated as indel.
        //ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatches (substitution only)
        //R2 flanking nt reverse complemented
    }

    withName: STAT_INDEL {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_indel.csv'
        ext.header = 'sample_name,no_indel,indel_5p,indel_3p,indel_5p_3p,no_indel_percent,indel_5p_percent,indel_3p_percent,indel_5p_3p_percent'
    }

    withName: CLASSIFY_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3c_classify_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
    }

    withName: FASTQC_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/2a_fastqc/fastq_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: STAT_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3c_classify_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_readthrough.csv'
        ext.header = 'sample_name,count_readthrough,count_readthrough_percent,count_non_readthrough,p_count_non_readthrough_percent'
    }

    withName: READ_PER_UMI_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/read_per_umi_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // X-axis range: choose from 'auto' or a positive number; if 'auto', the X-axis scale of the plot will be automatically determined.
    }
}
