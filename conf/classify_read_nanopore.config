process {

    withName: QC_FLANKING_READS {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3a_high_quality_flanking_read/qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
        ext.left_flanking_coordinates  = "1081:1101" // 0-based coordinates specifying left flanking coordinates to determine the quality, this is used for classify_indel otherwise, there are too many false positive indel_5p_only reads.
        ext.right_flanking_coordinates = "1485:1505"
        ext.score_cutoff = 20
    }

    withName: GET_HIGH_QUALITY_FLANKING_READS {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3a_high_quality_flanking_read/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.mean_quality_cutoff = 20

    }


    withName: CLASSIFY_INDEL_NANOPORE {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel" },
            mode: params.publish_dir_mode,
            pattern: '**/*.{fastq.gz,bam,bai}',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
        ext.repeat_flanking_left  = "TCGAGTCCCTCAAGTCCTTC"
        ext.repeat_flanking_right = "CCGCCACCGCCGCCGCCGCC"
        ext.allowed_mismatch = 2

        // ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2'
        // ext.indel_cutoff = 0.5 // if > 0.5 reads from the same UMI group are indel, all reads in that group will be treated as indel.
    }

    withName: STAT_INDEL {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_indel.csv'
        ext.header = 'sample_name,no_indel,indel_5p_only,indel_3p_only,indel_5p_and_3p,undetermined,no_indel_percent,indel_5p_only_percent,indel_3p_only_percent,indel_5p_and_3p_percent,undetermined_percent'
    }

    withName: STAT_QC_INDEL {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3b_classify_indel/qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.per_site_range_to_display = '1000:1200' // 1-based reference coordinate range to be displayed for the read quality
    }

    withName: CLASSIFY_READTHROUGH_NANOPORE {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3c_classify_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'TCGAGTCCCTCAAGTCCTTC CCGCCACCGCCGCCGCCGCC 2' // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
    }

    withName: FASTQC_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/2a_fastqc/fastq_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: STAT_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3c_classify_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = ''
        ext.outfile = 'classify_readthrough.csv'
        ext.header = 'sample_name,count_readthrough,count_readthrough_percent,count_non_readthrough,p_count_non_readthrough_percent'
    }

    withName: READ_PER_UMI_READTHROUGH {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/read_per_umi_readthrough" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '500' // X-axis range: choose from 'auto' or a positive number; if 'auto', the X-axis scale of the plot will be automatically determined.
    }
}
