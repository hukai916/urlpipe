process {
    withName: CLASSIFY_MERGE {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3d_classify_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
            ext.args = 'forcemerge=t'
    }

    withName: STAT_CSV_MERGE {
        publishDir = [
            path: { "${params.outdir}/3_read_category/3d_classify_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_SINGLE_MERGE {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/2a_fastqc/fastq_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_MERGE {
        publishDir = [
            path: { "${params.outdir}/2_qc_and_umi/2a_fastqc/fastq_non_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REPEAT_LENGTH_DISTRIBUTION_MERGE {
        ext.args = 'TCGAGTCCCTCAAGTCCTTC GGCGGCGGCGGCGGTGGCGG 2'
        // first 20nt flanking repeat region from R1, R2, and allowed mismatch (including INDELs)
        // R2 flanking nt reverse complemented
    }

    withName: STAT_REPEAT_LENGTH_DISTRIBUTION_MERGE {
        publishDir = [
            path: { "${params.outdir}/4_repeat_statistics/4a_repeat_length_distribution" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 'repeat_length_count_merge_umi_0.csv repeat_length_count_merge_umi_0.html "repeat_length_count_" ".csv"'
    }

    withName: REPEAT_LENGTH_DISTRIBUTION_PER_UMI_MERGE {
        publishDir = [
            path: { "${params.outdir}/4_repeat_statistics/4b_repeat_length_distribution_per_umi/csv" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = 10 // first args: max umi groups to output
    }

    withName: PLOT_REPEAT_LENGTH_DISTRIBUTION_PER_UMI_MERGE {
        publishDir = [
            path: { "${params.outdir}/4_repeat_statistics/4b_repeat_length_distribution_per_umi/html" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: STAT_REPEAT_LENGTH_DISTRIBUTION_MERGE_UMI_CORRECT {
        publishDir = [
            path: { "${params.outdir}/4_repeat_statistics/4a_repeat_length_distribution" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REPEAT_LENGTH_FRACTION_MERGE {
        publishDir = [
            path: { "${params.outdir}/4_repeat_statistics/4c_repeat_length_fraction" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
